{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport getBackgroundColor from \"./getBackgroundColor\";\n\nvar BlurView = function (_React$Component) {\n  _inherits(BlurView, _React$Component);\n\n  var _super = _createSuper(BlurView);\n\n  function BlurView() {\n    _classCallCheck(this, BlurView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlurView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$tint = _this$props.tint,\n          tint = _this$props$tint === void 0 ? 'default' : _this$props$tint,\n          _this$props$intensity = _this$props.intensity,\n          intensity = _this$props$intensity === void 0 ? 50 : _this$props$intensity,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"tint\", \"intensity\", \"style\"]);\n\n      var blurStyle = getBlurStyle({\n        tint: tint,\n        intensity: intensity\n      });\n      return React.createElement(View, _extends({}, props, {\n        style: [style, blurStyle]\n      }));\n    }\n  }]);\n\n  return BlurView;\n}(React.Component);\n\nfunction isBlurSupported() {\n  return typeof CSS !== 'undefined' && (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') || CSS.supports('backdrop-filter', 'blur(1px)'));\n}\n\nfunction getBlurStyle(_ref) {\n  var intensity = _ref.intensity,\n      tint = _ref.tint;\n  var style = {\n    backgroundColor: getBackgroundColor(intensity, tint)\n  };\n\n  if (isBlurSupported()) {\n    style.backdropFilter = \"saturate(180%) blur(\" + intensity * 0.2 + \"px)\";\n  }\n\n  return style;\n}\n\nexport default BlurView;","map":{"version":3,"sources":["../src/BlurView.web.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;AAIA,OAAO,kBAAP;;IAEM,Q;;;;;;;;;;;;;WACJ,kBAAM;MAAA,kBAC0D,KAAK,KAD/D;MAAA,mCACI,IADJ;MAAA,IACI,IADJ,iCACW,SADX;MAAA,wCACsB,SADtB;MAAA,IACsB,SADtB,sCACkC,EADlC;MAAA,IACsC,KADtC,eACsC,KADtC;MAAA,IACgD,KADhD;;MAEJ,IAAM,SAAS,GAAG,YAAY,CAAC;QAAE,IAAI,EAAJ,IAAF;QAAQ,SAAS,EAAT;MAAR,CAAD,CAA9B;MACA,OAAO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,SAAA,EAAA,EAAK,KAAL,EAAU;QAAE,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR;MAAT,CAAV,CAAL,CAAP;IACD;;;;EALoB,KAAK,CAAC,S;;AAQ7B,SAAS,eAAT,GAAwB;EAGtB,OACE,OAAO,GAAP,KAAe,WAAf,KACC,GAAG,CAAC,QAAJ,CAAa,yBAAb,EAAwC,WAAxC,KACC,GAAG,CAAC,QAAJ,CAAa,iBAAb,EAAgC,WAAhC,CAFF,CADF;AAKD;;AAED,SAAS,YAAT,OAAyC;EAAA,IAAjB,SAAiB,QAAjB,SAAiB;EAAA,IAAN,IAAM,QAAN,IAAM;EACvC,IAAM,KAAK,GAA2B;IACpC,eAAe,EAAE,kBAAkB,CAAC,SAAD,EAAY,IAAZ;EADC,CAAtC;;EAIA,IAAI,eAAe,EAAnB,EAAuB;IACrB,KAAK,CAAC,cAAN,4BAA8C,SAAS,GAAG,GAA1D;EACD;;EAED,OAAO,KAAP;AACD;;AAED,eAAe,QAAf","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { BlurProps } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nclass BlurView extends React.Component<BlurProps> {\n  render() {\n    const { tint = 'default', intensity = 50, style, ...props } = this.props;\n    const blurStyle = getBlurStyle({ tint, intensity });\n    return <View {...props} style={[style, blurStyle]} />;\n  }\n}\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  return (\n    typeof CSS !== 'undefined' &&\n    (CSS.supports('-webkit-backdrop-filter', 'blur(1px)') ||\n      CSS.supports('backdrop-filter', 'blur(1px)'))\n  );\n}\n\nfunction getBlurStyle({ intensity, tint }): Record<string, string> {\n  const style: Record<string, string> = {\n    backgroundColor: getBackgroundColor(intensity, tint),\n  };\n\n  if (isBlurSupported()) {\n    style.backdropFilter = `saturate(180%) blur(${intensity * 0.2}px)`;\n  }\n\n  return style;\n}\n\nexport default BlurView;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}