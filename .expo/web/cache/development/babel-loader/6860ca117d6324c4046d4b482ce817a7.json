{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["emitter","onAction","onRouteFocus","addListener","onDispatchAction","React","routerConfigOptionsRef","visitedNavigators","state","getState","action","result","router","isPrevented","shouldPreventRemove","setState","onRouteFocusParent","shouldFocus","key","onActionParent","i","actionListeners","listener","useOnPreventRemove","beforeRemoveListeners","addListenerParent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(() => addListenerParent?.('action', onAction), [\n    addListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}