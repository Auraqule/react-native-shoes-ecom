{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: routeOptions\n        }))));\n      },\n      options: routeOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","context","navigation","onAction","addListener","addKeyedListener","onRouteFocus","onDispatchAction","navigations","useNavigationCache","state","getState","setOptions","router","routes","useRouteCache","screen","screens","route","routeOptions","screenOptions","options","acc","render"],"mappings":";;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAOA,OAAA,SAAA;AACA,OAAA,wBAAA;AAKA,OAAA,kBAAA;AACA,OAAA,aAAA;AACA,OAAA,iBAAA;AACA,OAAA,sBAAA;AA+CA,eAAe,SAAA,cAAA,OAiB6B;EAAA,IAb1C,KAa0C,QAb1C,KAa0C;EAAA,IAb1C,OAa0C,QAb1C,OAa0C;EAAA,IAb1C,UAa0C,QAb1C,UAa0C;EAAA,IAb1C,aAa0C,QAb1C,aAa0C;EAAA,IAb1C,QAa0C,QAb1C,QAa0C;EAAA,IAb1C,QAa0C,QAb1C,QAa0C;EAAA,IAb1C,QAa0C,QAb1C,QAa0C;EAAA,IAb1C,WAa0C,QAb1C,WAa0C;EAAA,IAb1C,gBAa0C,QAb1C,gBAa0C;EAAA,IAb1C,YAa0C,QAb1C,YAa0C;EAAA,IAb1C,MAa0C,QAb1C,MAa0C;EAAA,IAD1CA,OAC0C,QAD1CA,OAC0C;;EAAA,sBACZC,KAAK,CAALA,QAAAA,CAA9B,EAA8BA,CADY;EAAA;EAAA,IACpC,OADoC;EAAA,IACpC,UADoC;;EAAA,wBAEIA,KAAK,CAALA,UAAAA,CAA9C,wBAA8CA,CAFJ;EAAA,IAEpC,gBAFoC,qBAEpC,gBAFoC;EAAA,IAEhBC,eAFgB,qBAEhBA,eAFgB;;EAM1C,IAAMC,OAAO,GAAG,KAAK,CAAL,OAAA,CACd;IAAA,OAAO;MACLC,UADK,EACLA,UADK;MAELC,QAFK,EAELA,QAFK;MAGLC,WAHK,EAGLA,WAHK;MAILC,gBAJK,EAILA,gBAJK;MAKLC,YALK,EAKLA,YALK;MAMLC,gBANK,EAMLA,gBANK;MAOLP,eAAAA,EAAAA;IAPK,CAAP;EAAA,CADc,EAUd,CAAA,UAAA,EAAA,QAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAVF,eAUE,CAVc,CAAhB;EAqBA,IAAMQ,WAAW,GAAGC,kBAAkB,CAAuB;IAC3DC,KAD2D,EAC3DA,KAD2D;IAE3DC,QAF2D,EAE3DA,QAF2D;IAG3DT,UAH2D,EAG3DA,UAH2D;IAI3DU,UAJ2D,EAI3DA,UAJ2D;IAK3DC,MAL2D,EAK3DA,MAL2D;IAM3Df,OAAAA,EAAAA;EAN2D,CAAvB,CAAtC;EASA,IAAMgB,MAAM,GAAGC,aAAa,CAACL,KAAK,CAAlC,MAA4B,CAA5B;EAEA,OAAO,MAAM,CAAN,MAAA,CAEL,UAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAmB;IACnB,IAAMM,MAAM,GAAGC,OAAO,CAACC,KAAK,CAA5B,IAAsB,CAAtB;IACA,IAAMhB,UAAU,GAAGM,WAAW,CAACU,KAAK,CAApC,GAA8B,CAA9B;;IAEA,IAAMC,YAAY,iDAEZ,OAAA,aAAA,KAAA,QAAA,IAAqCC,aAAa,IAAlD,IAAA,GAAA,aAAA,GAGAA,aAAa,CAAC;MACZF,KADY,EACZA,KADY;MAEZhB,UAAAA,EAAAA;IAFY,CAAD,CALD,GAUZ,OAAOc,MAAM,CAAb,OAAA,KAAA,QAAA,IAAsCA,MAAM,CAANA,OAAAA,IAAtC,IAAA,GACAA,MAAM,CADN,OAAA,GAGAA,MAAM,CAANA,OAAAA,CAAe;MACbE,KADa,EACbA,KADa;MAEbhB,UAAAA,EAAAA;IAFa,CAAfc,CAbY,GAkBbK,OAAO,CAACH,KAAK,CAAN,GAAA,CAlBM,CAAlB;;IAqBAI,GAAG,CAACJ,KAAK,CAATI,GAAG,CAAHA,GAAiB;MACfpB,UADe,EACfA,UADe;MAEfqB,MAFe,oBAEN;QACP,OACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;UAAmC,GAAG,EAAEL,KAAK,CAA7C,GAAA;UAAmD,KAAK,EAAEjB;QAA1D,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;UAA4B,KAAK,EAAEC;QAAnC,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,sBAAD,CAAA,QAAA,EAAA;UAAiC,KAAK,EAAEgB;QAAxC,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;UACE,UAAU,EADZ,UAAA;UAEE,KAAK,EAFP,KAAA;UAGE,MAAM,EAHR,MAAA;UAIE,UAAU,EAAER,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAJd,KAAA;UAKE,QAAQ,EALV,QAAA;UAME,QAAQ,EANV,QAAA;UAOE,OAAO,EAAES;QAPX,CAAA,CADF,CADF,CADF,CADF;MAHa,CAAA;MAqBfE,OAAO,EAAEF;IArBM,CAAjBG;IAwBA,OAAA,GAAA;EAnDK,CAAA,EAAP,EAAO,CAAP;AAqDD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}